.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_contour-map.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_contour-map.py:


Creating a map with contour lines
=================================

Plotting a contour map is handled by :meth:`pygmt.Figure.grdcontour`.


.. code-block:: default


    import pygmt

    # Load sample earth relief data
    grid = pygmt.datasets.load_earth_relief(resolution="05m", region=[-92.5, -82.5, -3, 7])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    grdblend [NOTICE]: Remote data courtesy of GMT data server OCEANIA [https://oceania.generic-mapping-tools.org]
    grdblend [NOTICE]: Earth Relief at 5x5 arc minutes from Gaussian Cartesian filtering (9 km fullwidth) of SRTM15+V2.1 [Tozer et al., 2019].
    grdblend [NOTICE]:   -> Download 180x180 degree grid tile (earth_relief_05m_p): S90W180




Create contour plot
-------------------

The :meth:`pygmt.Figure.grdcontour` method takes the grid input.
It plots annotated contour lines, which are thicker and have the
elevation/depth written on them, and unannotated contour lines.
In the example below, the default contour line intervals are 500 meters,
with an annotated contour line every 1000 meters.
By default, it plots the map with the
equidistant cylindrical projection and with no frame.


.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(grid=grid)
    fig.show()




.. image:: /tutorials/images/sphx_glr_contour-map_001.png
    :alt: contour map
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <IPython.core.display.Image object>



Contour line settings
---------------------

Use the ``annotation`` and ``interval`` arguments to adjust contour line intervals.
In the example below, there are contour intervals every 250 meters and
annotated contour lines every 1,000 meters.


.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
    )
    fig.show()




.. image:: /tutorials/images/sphx_glr_contour-map_002.png
    :alt: contour map
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <IPython.core.display.Image object>



Contour limits
--------------

The ``limit`` argument sets the minimum and maximum values for the contour lines.
The argument takes the low and high values,
and is either a list (as below) or a string ``limit="-4000/-2000"``.


.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
        limit=[-4000, -2000],
    )
    fig.show()




.. image:: /tutorials/images/sphx_glr_contour-map_003.png
    :alt: contour map
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <IPython.core.display.Image object>



Map settings
------------

The :meth:`pygmt.Figure.grdcontour` method accepts additional arguments,
including setting the projection and frame.


.. code-block:: default


    fig = pygmt.Figure()
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
        limit=[-4000, -2000],
        projection="M10c",
        frame=True,
    )
    fig.show()




.. image:: /tutorials/images/sphx_glr_contour-map_004.png
    :alt: contour map
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <IPython.core.display.Image object>



Adding a colormap
-----------------

The :meth:`pygmt.Figure.grdimage` method can be used to add a
colormap to the contour map. It must be called prior to
:meth:`pygmt.Figure.grdcontour` to keep the contour lines visible on the final map.
If the ``projection`` argument is specified in the :meth:`pygmt.Figure.grdimage`
method, it does not need to be repeated in the :meth:`pygmt.Figure.grdcontour` method.


.. code-block:: default


    fig = pygmt.Figure()
    fig.grdimage(
        grid=grid,
        cmap="haxby",
        projection="M10c",
        frame=True,
    )
    fig.grdcontour(
        annotation=1000,
        interval=250,
        grid=grid,
        limit=[-4000, -2000],
    )
    fig.show()



.. image:: /tutorials/images/sphx_glr_contour-map_005.png
    :alt: contour map
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <IPython.core.display.Image object>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.606 seconds)


.. _sphx_glr_download_tutorials_contour-map.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: contour-map.py <contour-map.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: contour-map.ipynb <contour-map.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
