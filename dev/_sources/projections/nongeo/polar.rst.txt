.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_projections_nongeo_polar.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_projections_nongeo_polar.py:


Polar
=====

``Pwidth``: Give the ``width`` of the figure.



.. image:: /projections/nongeo/images/sphx_glr_polar_001.png
    :alt: polar
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <IPython.core.display.Image object>





|


.. code-block:: default

    import pygmt

    fig = pygmt.Figure()
    fig.plot(
        # x inputs are the theta values for a polar plot.
        x=[180, 120, 270, 60, 0],
        # y inputs are the radius values for a polar plot.
        y=[15, 35, 15, 35, 15],
        pen="2p,blue",
        # The region values are theta-min/theta-max/radius-min/radius-max.
        region=[0, 360, 0, 40],
        projection="P15c",
        frame=["afg"],
    )
    fig.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.624 seconds)


.. _sphx_glr_download_projections_nongeo_polar.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: polar.py <polar.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: polar.ipynb <polar.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
