.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_projections_nongeo_cartesian.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_projections_nongeo_cartesian.py:


Cartesian
=========

``Xwidth/[height]``: Give the ``width`` of the figure and the optional argument ``height``.



.. image:: /projections/nongeo/images/sphx_glr_cartesian_001.png
    :alt: cartesian
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <IPython.core.display.Image object>





|


.. code-block:: default

    import pygmt

    fig = pygmt.Figure()
    fig.plot(
        # The ``x`` and ``y`` parameters are used to plot lines on the figure.
        x=[3, 9, 2],
        y=[4, 9, 37],
        pen="3p,red",
        # ``region`` sets the x and y ranges or the Cartesian figure.
        region=[0, 10, 0, 50],
        # The argument ``WSne`` is passed to ``frame`` to put axis labels only on the left and bottom axes.
        projection="X15c/10c",
        frame=["af", "WSne"],
    )
    fig.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.436 seconds)


.. _sphx_glr_download_projections_nongeo_cartesian.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: cartesian.py <cartesian.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: cartesian.ipynb <cartesian.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
